{"remainingRequest":"/Users/user/Desktop/MyVue/provider-search-service_vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/user/Desktop/MyVue/provider-search-service_vue/node_modules/vue-awesome/components/Icon.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/user/Desktop/MyVue/provider-search-service_vue/node_modules/vue-awesome/components/Icon.vue","mtime":499162500000},{"path":"/Users/user/Desktop/MyVue/provider-search-service_vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/user/Desktop/MyVue/provider-search-service_vue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/user/Desktop/MyVue/provider-search-service_vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/user/Desktop/MyVue/provider-search-service_vue/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/Users/user/Desktop/MyVue/provider-search-service_vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/user/Desktop/MyVue/provider-search-service_vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\nfunction assign (obj, ...sources) {\n  sources.forEach(source => {\n    for (let key in source) {\n      if (source.hasOwnProperty(key)) {\n        obj[key] = source[key]\n      }\n    }\n  })\n\n  return obj\n}\n\nlet icons = {}\n\nexport default {\n  name: 'fa-icon',\n  render (h) {\n    if (this.name === null) {\n      return h()\n    }\n\n    let options = {\n      class: this.klass,\n      style: this.style,\n      attrs: {\n        role: this.label ? 'img' : 'presentation',\n        'aria-label': this.label || null,\n        tabindex: this.tabindex,\n        x: this.x,\n        y: this.y,\n        width: this.width,\n        height: this.height,\n        viewBox: this.box,\n        focusable: this.focusable\n      }\n    }\n\n    if (this.raw) {\n      options.domProps = {\n        innerHTML: this.raw\n      }\n    }\n\n    return h(\n      'svg',\n      options,\n      this.raw && this.icon ? null : (this.$slots.default || [\n        ...this.icon.paths.map((path, i) => h('path', {\n          attrs: path,\n          key: `path-${i}`\n        })),\n        ...this.icon.polygons.map((polygon, i) => h('polygon', {\n          attrs: polygon,\n          key: `polygon-${i}`\n        }))\n      ]))\n  },\n  props: {\n    name: {\n      type: String,\n      validator (val) {\n        if (val && !(val in icons)) {\n          console.warn(`Invalid prop: prop \"name\" is referring to an unregistered icon \"${val}\".` +\n            `\\nPlease make sure you have imported this icon before using it.`)\n          return false\n        }\n        return true\n      }\n    },\n    scale: [Number, String],\n    spin: Boolean,\n    inverse: Boolean,\n    pulse: Boolean,\n    flip: {\n      validator (val) {\n        return val === 'horizontal' || val === 'vertical'\n      }\n    },\n    label: String,\n    tabindex: [Number, String]\n  },\n  data () {\n    return {\n      x: false,\n      y: false,\n      childrenWidth: 0,\n      childrenHeight: 0,\n      outerScale: 1\n    }\n  },\n  computed: {\n    normalizedScale () {\n      let scale = this.scale\n      scale = typeof scale === 'undefined' ? 1 : Number(scale)\n      if (isNaN(scale) || scale <= 0) {\n        console.warn(`Invalid prop: prop \"scale\" should be a number over 0.`, this)\n        return this.outerScale\n      }\n      return scale * this.outerScale\n    },\n    klass () {\n      return {\n        'fa-icon': true,\n        'fa-spin': this.spin,\n        'fa-flip-horizontal': this.flip === 'horizontal',\n        'fa-flip-vertical': this.flip === 'vertical',\n        'fa-inverse': this.inverse,\n        'fa-pulse': this.pulse,\n        [this.$options.name]: true\n      }\n    },\n    icon () {\n      if (this.name) {\n        return icons[this.name]\n      }\n      return null\n    },\n    box () {\n      if (this.icon) {\n        return `0 0 ${this.icon.width} ${this.icon.height}`\n      }\n      return `0 0 ${this.width} ${this.height}`\n    },\n    ratio () {\n      if (!this.icon) {\n        return 1\n      }\n      let { width, height } = this.icon\n      return Math.max(width, height) / 16\n    },\n    width () {\n      return this.childrenWidth || this.icon && this.icon.width / this.ratio * this.normalizedScale || 0\n    },\n    height () {\n      return this.childrenHeight || this.icon && this.icon.height / this.ratio * this.normalizedScale || 0\n    },\n    style () {\n      if (this.normalizedScale === 1) {\n        return false\n      }\n      return {\n        fontSize: this.normalizedScale + 'em'\n      }\n    },\n    raw () {\n      // generate unique id for each icon's SVG element with ID\n      if (!this.icon || !this.icon.raw) {\n        return null\n      }\n      let raw = this.icon.raw\n      let ids = {}\n      raw = raw.replace(/\\s(?:xml:)?id=([\"']?)([^\"')\\s]+)\\1/g, (match, quote, id) => {\n        let uniqueId = getId()\n        ids[id] = uniqueId\n        return ` id=\"${uniqueId}\"`\n      })\n      raw = raw.replace(/#(?:([^'\")\\s]+)|xpointer\\(id\\((['\"]?)([^')]+)\\2\\)\\))/g, (match, rawId, _, pointerId) => {\n        let id = rawId || pointerId\n        if (!id || !ids[id]) {\n          return match\n        }\n\n        return `#${ids[id]}`\n      })\n\n      return raw\n    },\n    focusable () {\n      let { tabindex } = this\n      if (tabindex == null) {\n        return 'false'\n      }\n      let index = typeof tabindex === 'string' ? parseInt(tabindex, 10) : tabindex\n      if (index >= 0) {\n        return null\n      }\n      return 'false'\n    }\n  },\n  mounted () {\n    if (!this.name && this.name !== null && this.$children.length === 0) {\n      console.warn(`Invalid prop: prop \"name\" is required.`)\n      return\n    }\n\n    if (this.icon) {\n      return\n    }\n\n    let width = 0\n    let height = 0\n    this.$children.forEach(child => {\n      child.outerScale = this.normalizedScale\n\n      width = Math.max(width, child.width)\n      height = Math.max(height, child.height)\n    })\n    this.childrenWidth = width\n    this.childrenHeight = height\n    this.$children.forEach(child => {\n      child.x = (width - child.width) / 2\n      child.y = (height - child.height) / 2\n    })\n  },\n  register (data) {\n    for (let name in data) {\n      let icon = data[name]\n      let {\n        paths = [],\n        d,\n        polygons = [],\n        points\n      } = icon\n\n      if (d) {\n        paths.push({ d })\n      }\n\n      if (points) {\n        polygons.push({ points })\n      }\n\n      icons[name] = assign({}, icon, {\n        paths,\n        polygons\n      })\n    }\n  },\n  icons\n}\n\nlet cursor = 0xd4937\nfunction getId () {\n  return `fa-${(cursor++).toString(16)}`\n}\n",{"version":3,"sources":["Icon.vue"],"names":[],"mappingsfile":"Icon.vue","sourceRoot":"node_modules/vue-awesome/components","sourcesContent":["<script>\nfunction assign (obj, ...sources) {\n  sources.forEach(source => {\n    for (let key in source) {\n      if (source.hasOwnProperty(key)) {\n        obj[key] = source[key]\n      }\n    }\n  })\n\n  return obj\n}\n\nlet icons = {}\n\nexport default {\n  name: 'fa-icon',\n  render (h) {\n    if (this.name === null) {\n      return h()\n    }\n\n    let options = {\n      class: this.klass,\n      style: this.style,\n      attrs: {\n        role: this.label ? 'img' : 'presentation',\n        'aria-label': this.label || null,\n        tabindex: this.tabindex,\n        x: this.x,\n        y: this.y,\n        width: this.width,\n        height: this.height,\n        viewBox: this.box,\n        focusable: this.focusable\n      }\n    }\n\n    if (this.raw) {\n      options.domProps = {\n        innerHTML: this.raw\n      }\n    }\n\n    return h(\n      'svg',\n      options,\n      this.raw && this.icon ? null : (this.$slots.default || [\n        ...this.icon.paths.map((path, i) => h('path', {\n          attrs: path,\n          key: `path-${i}`\n        })),\n        ...this.icon.polygons.map((polygon, i) => h('polygon', {\n          attrs: polygon,\n          key: `polygon-${i}`\n        }))\n      ]))\n  },\n  props: {\n    name: {\n      type: String,\n      validator (val) {\n        if (val && !(val in icons)) {\n          console.warn(`Invalid prop: prop \"name\" is referring to an unregistered icon \"${val}\".` +\n            `\\nPlease make sure you have imported this icon before using it.`)\n          return false\n        }\n        return true\n      }\n    },\n    scale: [Number, String],\n    spin: Boolean,\n    inverse: Boolean,\n    pulse: Boolean,\n    flip: {\n      validator (val) {\n        return val === 'horizontal' || val === 'vertical'\n      }\n    },\n    label: String,\n    tabindex: [Number, String]\n  },\n  data () {\n    return {\n      x: false,\n      y: false,\n      childrenWidth: 0,\n      childrenHeight: 0,\n      outerScale: 1\n    }\n  },\n  computed: {\n    normalizedScale () {\n      let scale = this.scale\n      scale = typeof scale === 'undefined' ? 1 : Number(scale)\n      if (isNaN(scale) || scale <= 0) {\n        console.warn(`Invalid prop: prop \"scale\" should be a number over 0.`, this)\n        return this.outerScale\n      }\n      return scale * this.outerScale\n    },\n    klass () {\n      return {\n        'fa-icon': true,\n        'fa-spin': this.spin,\n        'fa-flip-horizontal': this.flip === 'horizontal',\n        'fa-flip-vertical': this.flip === 'vertical',\n        'fa-inverse': this.inverse,\n        'fa-pulse': this.pulse,\n        [this.$options.name]: true\n      }\n    },\n    icon () {\n      if (this.name) {\n        return icons[this.name]\n      }\n      return null\n    },\n    box () {\n      if (this.icon) {\n        return `0 0 ${this.icon.width} ${this.icon.height}`\n      }\n      return `0 0 ${this.width} ${this.height}`\n    },\n    ratio () {\n      if (!this.icon) {\n        return 1\n      }\n      let { width, height } = this.icon\n      return Math.max(width, height) / 16\n    },\n    width () {\n      return this.childrenWidth || this.icon && this.icon.width / this.ratio * this.normalizedScale || 0\n    },\n    height () {\n      return this.childrenHeight || this.icon && this.icon.height / this.ratio * this.normalizedScale || 0\n    },\n    style () {\n      if (this.normalizedScale === 1) {\n        return false\n      }\n      return {\n        fontSize: this.normalizedScale + 'em'\n      }\n    },\n    raw () {\n      // generate unique id for each icon's SVG element with ID\n      if (!this.icon || !this.icon.raw) {\n        return null\n      }\n      let raw = this.icon.raw\n      let ids = {}\n      raw = raw.replace(/\\s(?:xml:)?id=([\"']?)([^\"')\\s]+)\\1/g, (match, quote, id) => {\n        let uniqueId = getId()\n        ids[id] = uniqueId\n        return ` id=\"${uniqueId}\"`\n      })\n      raw = raw.replace(/#(?:([^'\")\\s]+)|xpointer\\(id\\((['\"]?)([^')]+)\\2\\)\\))/g, (match, rawId, _, pointerId) => {\n        let id = rawId || pointerId\n        if (!id || !ids[id]) {\n          return match\n        }\n\n        return `#${ids[id]}`\n      })\n\n      return raw\n    },\n    focusable () {\n      let { tabindex } = this\n      if (tabindex == null) {\n        return 'false'\n      }\n      let index = typeof tabindex === 'string' ? parseInt(tabindex, 10) : tabindex\n      if (index >= 0) {\n        return null\n      }\n      return 'false'\n    }\n  },\n  mounted () {\n    if (!this.name && this.name !== null && this.$children.length === 0) {\n      console.warn(`Invalid prop: prop \"name\" is required.`)\n      return\n    }\n\n    if (this.icon) {\n      return\n    }\n\n    let width = 0\n    let height = 0\n    this.$children.forEach(child => {\n      child.outerScale = this.normalizedScale\n\n      width = Math.max(width, child.width)\n      height = Math.max(height, child.height)\n    })\n    this.childrenWidth = width\n    this.childrenHeight = height\n    this.$children.forEach(child => {\n      child.x = (width - child.width) / 2\n      child.y = (height - child.height) / 2\n    })\n  },\n  register (data) {\n    for (let name in data) {\n      let icon = data[name]\n      let {\n        paths = [],\n        d,\n        polygons = [],\n        points\n      } = icon\n\n      if (d) {\n        paths.push({ d })\n      }\n\n      if (points) {\n        polygons.push({ points })\n      }\n\n      icons[name] = assign({}, icon, {\n        paths,\n        polygons\n      })\n    }\n  },\n  icons\n}\n\nlet cursor = 0xd4937\nfunction getId () {\n  return `fa-${(cursor++).toString(16)}`\n}\n</script>\n\n<style>\n.fa-icon {\n  display: inline-block;\n  fill: currentColor;\n}\n\n.fa-flip-horizontal {\n  transform: scale(-1, 1);\n}\n\n.fa-flip-vertical {\n  transform: scale(1, -1);\n}\n\n.fa-spin {\n  animation: fa-spin 1s 0s infinite linear;\n}\n\n.fa-inverse {\n  color: #fff;\n}\n\n.fa-pulse {\n  animation: fa-spin 1s infinite steps(8);\n}\n\n@keyframes fa-spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n</style>\n"]}]}